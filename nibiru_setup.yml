- name: Install 
  vars_files: 
    - vars/vars.yml
  hosts: "{{ host }}"
  gather_facts: yes
  become: yes    

  pre_tasks:
    - pause:
        prompt: "Input your recovery mnemonic"
        echo: no
      when: ask_recovery != "no" 
      register: recovery_mnemonic

 
      
    - name: Set recovery mnemonic
      set_fact: recovery="{{ recovery_mnemonic.user_input }}"
      when: recovery_mnemonic.user_input is defined


  tasks:
    
    # - name: Check if Docker and Docker Compose are installed
    #   include_tasks: "playbooks/check_docker.yml"

    - name: Check resources 
      include_tasks: "playbooks/check_resources.yml"

    

    - name: Get latest info
      uri:
        url: "{{ nibiru_githubapi_url }}{{ node_version }}"
        return_content: true
      register: nibiru_info

    - name: Get version 
      set_fact: version="{{ nibiru_info.json.tag_name }}"

     

    - name: Print version to install
      debug:  
        msg: "{{ version }}"



    - name: Filter assets for amd64 platform
      set_fact:
        asset_file_name: "{{ nibiru_info.json.assets | selectattr('name', 'match', '.*linux_amd64.*')|map(attribute='name') | list }}"

    - name: Filter assets for amd64 platform
      set_fact:
        asset_url: "{{ nibiru_info.json.assets | selectattr('name', 'match', '.*linux_amd64.*')|map(attribute='browser_download_url') | list }}"
    
    - name: Print 
      debug:
        msg: "{{ asset_url[0] }} {{ asset_file_name[0]}}"

    # - name: Filter assets for amd64 platform
    #   set_fact:
    #     asset_file_name: "{{ nibiru_info.json.assets[5].name }}"

    # - name: Filter assets for amd64 platform
    #   set_fact:
    #     asset_url: "{{ nibiru_info.json.assets[5].browser_download_url }}"
    
    
    
    - name: Create a directory
      file:
        path: "{{ docker_files_local_path }}"
        state: directory

    
    - name: Get Dockerfile from URL
      get_url:
        force: true
        url: "{{ nibiru_dockerfile_url }}"
        dest: "{{ docker_files_local_path }}{{ dockerfile }}"

    - name: Get bootstrap script from URL
      get_url:
        force: true
        url: "{{ nibiru_bootstrap_url }}"
        dest: "{{ docker_files_local_path }}{{ bootstrapscript }}"
        

    - name: Build image and with build args
      community.docker.docker_image:
        name: "{{ image_name }}"
        tag: "{{ version }}"
        state: present
        docker_host: "unix://var/run/docker.sock"
        build:
          path: "{{ docker_files_local_path }}"
          dockerfile: "{{ dockerfile }}"
          args:
            ARTIFACT_LINK: "{{ asset_url[0] }}"
            ARTIFACT_BIN: "{{ asset_file_name[0] }}"
            NIBIRU_MONIKER_ARG: "{{ NIBIRU_MONIKER }}"
            NIBIRU_WALLET_ARG: "{{ NIBIRU_WALLET }}"
            NIBIRU_CHAIN_ARG: "{{ NIBIRU_CHAIN }}"
            NIBIRU_GENESIS_FILE_ARG: "{{ nibiru_genesis_file }}"
            NIBIRU_SEEDS_FILE_ARG: "{{ nibiru_seeds_file }}"
            NIBIRU_RPC_SERVERS_FILE_ARG: "{{ nibiru_rpc_servers_file }}"
            NIBIRU_TRUST_HEIGHT_FILE_ARG: "{{ nibiru_trust_height_file }}"
            NIBIRU_TRUST_HASH_FILE_ARG: "{{ nibiru_trust_hash }}"
        source: build

    - name: Create a docker network
      docker_network:
        name: "{{ network_name }}"


    - name: Start the container with Nibiru
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}:{{ version }}"
        labels: 
          version: "{{ version }}"
        pull: false
        detach: yes
        restart_policy: unless-stopped
        networks: 
          - name: "{{ network_name }}"
        # volumes: 
        #   - "{{ volume_name }}:{{ container_mount_point }}"
        cpus: "{{ cpus }}"
        cpu_shares: "{{ cpu_shares }}"
        memory: "{{ memory }}"
        memory_reservation: "{{ memory_reservation }}"   
        command: ["nibid", "start"]

    - name: Print if recovery is enabled
      ansible.builtin.debug:
        msg: " printf '%s\n%s\n' {{ recovery }} {{ password4key  }} | {{ command }} keys add {{ NIBIRU_WALLET }} --recover"
      when: recovery is defined

    - name: Run a new key generation inside container
      community.docker.docker_container_exec: 
        container: "{{ container_name }}"
        command: sh -c " printf '%s\n%s\n' {{ password4key }} {{ password4key }} | {{ command }} keys add {{ NIBIRU_WALLET }}"
      register: out
      when: recovery is not defined

  

    - name: Run recovery key generation inside container
      community.docker.docker_container_exec: 
        container: "{{ container_name }}"
        command: sh -c "printf '%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s \n%s\n %s\n' {{ recovery }} {{ password4key }} {{ password4key }} | {{ command }} keys add {{ NIBIRU_WALLET }} --recover"
      register: out_recovery
      when: recovery is defined

    - name: Print all information about new key
      block:
        - name: Print all details about key
          ansible.builtin.debug:
            var: out.stdout

        - name: Print recovery information about key (mnemonic)
          ansible.builtin.debug:
            var: out.stderr_lines

      when: recovery is not  defined
    
   
    - name: Print all details about recover key
      ansible.builtin.debug:
        var: out_recovery.stdout
      when: recovery is defined


  
  